name: ci-cd-azure-container-apps

on:
  push:
    branches: [ microservices ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  RG: ${{ secrets.AZURE_RESOURCE_GROUP }}
  ENV_NAME: ${{ secrets.AZURE_CONTAINERAPPS_ENV }}
  LOCATION: ${{ secrets.AZURE_LOCATION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize owner to lowercase
        run: echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push auth-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/auth-service/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/quizzer-auth-service:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/quizzer-auth-service:latest

      - name: Build and push quiz-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/quiz-service/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/quizzer-quiz-service:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/quizzer-quiz-service:latest

      - name: Build and push ai-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/ai-service/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/quizzer-ai-service:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/quizzer-ai-service:latest

      - name: Build and push submission-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/submission-service/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/quizzer-submission-service:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/quizzer-submission-service:latest

      - name: Build and push analytics-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/analytics-service/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/quizzer-analytics-service:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/quizzer-analytics-service:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI - Ensure Container Apps extension
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            az extension add --name containerapp --upgrade
            az provider register --namespace Microsoft.App --wait

      - name: Create Resource Group and Container Apps Environment (idempotent)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            az group create -n "$RG" -l "$LOCATION"
            if ! az containerapp env show -n "$ENV_NAME" -g "$RG" >/dev/null 2>&1; then
              az containerapp env create -n "$ENV_NAME" -g "$RG" -l "$LOCATION" --logs-destination none
            fi

      - name: Deploy/Update services to Azure Container Apps
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            # Ensure extension available in this step's container too
            az extension add --name containerapp --upgrade

            REGISTRY_SERVER=ghcr.io
            REGISTRY_USER=${{ secrets.GHCR_USERNAME }}
            REGISTRY_PASS='${{ secrets.GHCR_TOKEN }}'
            OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

            # Bring GitHub secrets into bash vars for safe checks
            MONGODB_URI='${{ secrets.MONGODB_URI }}'
            JWT_SECRET='${{ secrets.JWT_SECRET }}'
            GEMINI_API_KEY='${{ secrets.GEMINI_API_KEY }}'
            GROQ_API_KEY='${{ secrets.GROQ_API_KEY }}'

            # Helpers to build arrays safely
            add_secret() { # usage: add_secret ARR_NAME key value
              local -n arr=$1
              local key=$2
              local val=$3
              if [ -n "$val" ]; then
                arr+=("${key}=${val}")
              fi
            }
            add_envref() { # usage: add_envref ARR_NAME envKey secretName valueToCheck
              local -n arr=$1
              local envKey=$2
              local secretName=$3
              local val=$4
              if [ -n "$val" ]; then
                arr+=("${envKey}=secretref:${secretName}")
              fi
            }

            upsert_app() {
              local APP_NAME=$1
              local IMAGE=$2
              local PORT=$3
              local SECRETS_ARR_NAME=$4
              local ENV_PLAIN_ARR_NAME=$5
              local ENV_SECRET_REFS_ARR_NAME=$6

              # Name references for arrays
              local -n SECRETS_ARR=$SECRETS_ARR_NAME
              local -n ENV_PLAIN_ARR=$ENV_PLAIN_ARR_NAME
              local -n ENV_SECRET_REFS_ARR=$ENV_SECRET_REFS_ARR_NAME

              if az containerapp show -n "$APP_NAME" -g "$RG" >/dev/null 2>&1; then
                if [ ${#SECRETS_ARR[@]} -gt 0 ]; then
                  az containerapp secret set -n "$APP_NAME" -g "$RG" --secrets "${SECRETS_ARR[@]}"
                fi
                az containerapp update \
                  -n "$APP_NAME" -g "$RG" \
                  --image "$IMAGE" \
                  --registry-server $REGISTRY_SERVER \
                  --registry-username "$REGISTRY_USER" \
                  --registry-password "$REGISTRY_PASS" \
                  --target-port $PORT \
                  --ingress external \
                  --env-vars "${ENV_PLAIN_ARR[@]}" "${ENV_SECRET_REFS_ARR[@]}"
              else
                # Build optional secrets args
                SECRETS_ARGS=()
                if [ ${#SECRETS_ARR[@]} -gt 0 ]; then
                  SECRETS_ARGS=( --secrets "${SECRETS_ARR[@]}" )
                fi
                az containerapp create \
                  -n "$APP_NAME" -g "$RG" \
                  --environment "$ENV_NAME" \
                  --image "$IMAGE" \
                  --registry-server $REGISTRY_SERVER \
                  --registry-username "$REGISTRY_USER" \
                  --registry-password "$REGISTRY_PASS" \
                  --target-port $PORT \
                  --ingress external \
                  --min-replicas 0 --max-replicas 1 \
                  "${SECRETS_ARGS[@]}" \
                  --env-vars "${ENV_PLAIN_ARR[@]}" "${ENV_SECRET_REFS_ARR[@]}"
              fi
            }

            # auth-service
            AUTH_SECRETS=()
            add_secret AUTH_SECRETS mongodb-uri "$MONGODB_URI"
            add_secret AUTH_SECRETS jwt-secret "$JWT_SECRET"
            AUTH_ENV=("NODE_ENV=production" "AUTH_SERVICE_PORT=3001")
            AUTH_ENVREFS=()
            add_envref AUTH_ENVREFS MONGODB_URI mongodb-uri "$MONGODB_URI"
            add_envref AUTH_ENVREFS JWT_SECRET jwt-secret "$JWT_SECRET"
            upsert_app \
              quizzer-auth-service \
              ghcr.io/$OWNER_LC/quizzer-auth-service:${{ github.sha }} \
              3001 \
              AUTH_SECRETS \
              AUTH_ENV \
              AUTH_ENVREFS

            # quiz-service
            QUIZ_SECRETS=()
            add_secret QUIZ_SECRETS mongodb-uri "$MONGODB_URI"
            QUIZ_ENV=("NODE_ENV=production" "QUIZ_SERVICE_PORT=3002")
            QUIZ_ENVREFS=()
            add_envref QUIZ_ENVREFS MONGODB_URI mongodb-uri "$MONGODB_URI"
            upsert_app \
              quizzer-quiz-service \
              ghcr.io/$OWNER_LC/quizzer-quiz-service:${{ github.sha }} \
              3002 \
              QUIZ_SECRETS \
              QUIZ_ENV \
              QUIZ_ENVREFS

            # ai-service
            AI_SECRETS=()
            add_secret AI_SECRETS mongodb-uri "$MONGODB_URI"
            add_secret AI_SECRETS gemini-api-key "$GEMINI_API_KEY"
            add_secret AI_SECRETS groq-api-key "$GROQ_API_KEY"
            AI_ENV=("NODE_ENV=production" "AI_SERVICE_PORT=3003")
            AI_ENVREFS=()
            add_envref AI_ENVREFS MONGODB_URI mongodb-uri "$MONGODB_URI"
            add_envref AI_ENVREFS GEMINI_API_KEY gemini-api-key "$GEMINI_API_KEY"
            add_envref AI_ENVREFS GROQ_API_KEY groq-api-key "$GROQ_API_KEY"
            upsert_app \
              quizzer-ai-service \
              ghcr.io/$OWNER_LC/quizzer-ai-service:${{ github.sha }} \
              3003 \
              AI_SECRETS \
              AI_ENV \
              AI_ENVREFS

            # submission-service
            SUB_SECRETS=()
            add_secret SUB_SECRETS mongodb-uri "$MONGODB_URI"
            SUB_ENV=("NODE_ENV=production" "SUBMISSION_SERVICE_PORT=3004")
            SUB_ENVREFS=()
            add_envref SUB_ENVREFS MONGODB_URI mongodb-uri "$MONGODB_URI"
            upsert_app \
              quizzer-submission-service \
              ghcr.io/$OWNER_LC/quizzer-submission-service:${{ github.sha }} \
              3004 \
              SUB_SECRETS \
              SUB_ENV \
              SUB_ENVREFS

            # analytics-service
            ANA_SECRETS=()
            add_secret ANA_SECRETS mongodb-uri "$MONGODB_URI"
            ANA_ENV=("NODE_ENV=production" "ANALYTICS_SERVICE_PORT=3005")
            ANA_ENVREFS=()
            add_envref ANA_ENVREFS MONGODB_URI mongodb-uri "$MONGODB_URI"
            upsert_app \
              quizzer-analytics-service \
              ghcr.io/$OWNER_LC/quizzer-analytics-service:${{ github.sha }} \
              3005 \
              ANA_SECRETS \
              ANA_ENV \
              ANA_ENVREFS
