name: Force Deploy All Services

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  force-deploy-all:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          { name: 'auth-service', path: 'services/auth-service', port: 3001 },
          { name: 'quiz-service', path: 'services/quiz-service', port: 3002 },
          { name: 'ai-service', path: 'services/ai-service', port: 3003 },
          { name: 'submission-service', path: 'services/submission-service', port: 3004 },
          { name: 'analytics-service', path: 'services/analytics-service', port: 3005 }
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "RESOURCE_GROUP=${{ secrets.AZURE_RESOURCE_GROUP }}" >> $GITHUB_ENV
            echo "CONTAINER_APP_ENVIRONMENT=${{ secrets.AZURE_CONTAINER_APP_ENVIRONMENT }}" >> $GITHUB_ENV
            echo "APP_SUFFIX=" >> $GITHUB_ENV
          else
            echo "RESOURCE_GROUP=${{ secrets.AZURE_RESOURCE_GROUP_STAGING }}" >> $GITHUB_ENV
            echo "CONTAINER_APP_ENVIRONMENT=${{ secrets.AZURE_CONTAINER_APP_ENVIRONMENT_STAGING }}" >> $GITHUB_ENV
            echo "APP_SUFFIX=-staging" >> $GITHUB_ENV
          fi

      - name: Check service exists
        run: |
          echo "🔍 Checking service: ${{ matrix.service.name }}"
          echo "Path: ${{ matrix.service.path }}"
          echo "Port: ${{ matrix.service.port }}"
          
          if [ -d "${{ matrix.service.path }}" ]; then
            echo "✅ Service directory exists"
          else
            echo "❌ Service directory not found!"
            exit 1
          fi
          
          if [ -f "${{ matrix.service.path }}/Dockerfile" ]; then
            echo "✅ Dockerfile exists"
          else
            echo "❌ Dockerfile not found!"
            exit 1
          fi
          
          if [ -f "${{ matrix.service.path }}/package.json" ]; then
            echo "✅ package.json exists"
          else
            echo "❌ package.json not found!"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.service.path }}/package-lock.json'

      - name: Install dependencies
        run: |
          cd ${{ matrix.service.path }}
          npm ci

      - name: Build TypeScript
        run: |
          cd ${{ matrix.service.path }}
          npm run build

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        run: |
          cd ${{ matrix.service.path }}
          IMAGE_TAG=${{ env.AZURE_CONTAINER_REGISTRY }}/quizzer-${{ matrix.service.name }}:${{ github.event.inputs.environment }}-${{ github.sha }}
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ matrix.service.path }}
          acrName: ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME }}
          containerAppName: quizzer-${{ matrix.service.name }}${{ env.APP_SUFFIX }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppEnvironment: ${{ env.CONTAINER_APP_ENVIRONMENT }}
          targetPort: ${{ matrix.service.port }}
          ingress: external
          environmentVariables: |
            NODE_ENV=${{ github.event.inputs.environment }}
            PORT=${{ matrix.service.port }}
            MONGODB_URI=${{ github.event.inputs.environment == 'production' && secrets.MONGODB_URI || secrets.MONGODB_URI_STAGING }}
            REDIS_URL=${{ github.event.inputs.environment == 'production' && secrets.REDIS_URL || secrets.REDIS_URL_STAGING }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}

      - name: Deployment summary
        run: |
          echo "✅ Successfully deployed ${{ matrix.service.name }} to ${{ github.event.inputs.environment }}"
          echo "App Name: quizzer-${{ matrix.service.name }}${{ env.APP_SUFFIX }}"
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo "Environment: ${{ env.CONTAINER_APP_ENVIRONMENT }}"
