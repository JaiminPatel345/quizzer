version: '3.8'

services:
  # Auth Service
  auth-service:
    image: ${DOCKER_REGISTRY}/quizzer-auth-service:${IMAGE_TAG:-latest}
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - LOG_LEVEL=${LOG_LEVEL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - CORS_ORIGIN=${CORS_ORIGIN}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Quiz Service
  quiz-service:
    image: ${DOCKER_REGISTRY}/quizzer-quiz-service:${IMAGE_TAG:-latest}
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3002
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      - auth-service
      - ai-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Service
  ai-service:
    image: ${DOCKER_REGISTRY}/quizzer-ai-service:${IMAGE_TAG:-latest}
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3003
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - CORS_ORIGIN=${CORS_ORIGIN}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Submission Service
  submission-service:
    image: ${DOCKER_REGISTRY}/quizzer-submission-service:${IMAGE_TAG:-latest}
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3004
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - QUIZ_SERVICE_URL=${QUIZ_SERVICE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      - auth-service
      - ai-service
      - quiz-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Analytics Service
  analytics-service:
    image: ${DOCKER_REGISTRY}/quizzer-analytics-service:${IMAGE_TAG:-latest}
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3005
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - QUIZ_SERVICE_URL=${QUIZ_SERVICE_URL}
      - SUBMISSION_SERVICE_URL=${SUBMISSION_SERVICE_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      - auth-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3005/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
